<!DOCTYPE html>
<html>

<head>
	<!--
	Pseudocode
	File:	chap10-pseudocode.htm
			chap10.htm
	Author: Christian Cook
	Date: 4/4/2017
	--->

	<meta charset="UTF-8" />
	<title>Pseudocode</title>
	<script src="modernizr-1.5.js"></script>
	<link href="chap.css" rel="stylesheet" /> 

	<style>
		tab1{padding-left: 2em; }
		tab2{padding-left: 4em; }
		tab3{padding-left: 6em; }
		tab4{padding-left: 8em; }
	</style>
	
</head>

<body>

	<h1>Pseudocode</h1>
	
	<h2>Definition</h2>
	
	<p>Pseudocode: a program code unrelated to the hardware of a particular computer and 
	requiring conversion to the code used by the computer before the program can be used. 
	</p>

	<h2>Application</h2>
	
	<p>Pseudocode is used by many programmers to detail the requirements of a program. 
	When someone is writing pseudocode, it is written in a way that structures the design 
	and requirements of code that is going to be written. This is done with detailed statement 
	about what a program is going to do or what is to be done in a function call.<br>
	Pseudocode is first written in plain English to form the basics of what the program is going to do. <br><br>
	A programmer who needs to implement a specific algorithm, especially an unfamiliar one, 
	will often start with a pseudocode description, and then "translate" that description into the 
	target programming language and modify it to interact correctly with the rest of the program. 
	Programmers may also start a project by sketching out the code in pseudocode on paper before 
	writing it in its actual language, as a top-down structuring approach, with a process of steps 
	to be followed as a refinement.
	</p>
 
	<h2>Syntax</h2>
	
	<p>As the name suggests, pseudocode generally does not actually obey the syntax rules of any 
	particular language; there is no systematic standard form, although any particular writer will 
	generally borrow style and syntax; for example, control structures from some conventional 
	programming language. Popular syntax sources include Fortran, Pascal, BASIC, C, C++, Java, Lisp, 
	and ALGOL. Variable declarations are typically omitted. Function calls and blocks of code, such 
	as code contained within a loop, are often replaced by a one-line natural language sentence.<br><br>
	Depending on the writer, pseudocode may therefore vary widely in style, from a near-exact 
	imitation of a real programming language at one extreme, to a description approaching formatted 
	prose at the other.
	</p>
 
	<h2>Examples</h2>
	
	<h3>Fortran style pseudocode</h3>
	
	<p><tab1>program fizzbuzz<br>
	<tab2>Do i = 1 to 100<br>
	<tab3>set print_number to true<br>
	<tab3>If i is divisible by 3<br>
	<tab4>print "Fizz"<br>
	<tab4>set print_number to false<br>
	<tab3>If i is divisible by 5<br>
	<tab4>print "Buzz"<br>
	<tab4>set print_number to false<br>
	<tab3>If print_number, print i<br>
	<tab3>print a newline<br>
	<tab2>end do<br>
	</p>
	
	<h3>Pascal style pseudocode</h3>
	
	<p><tab1>procedure fizzbuzz<br>
	<tab2>For i := 1 to 100 do<br>
	<tab3>set print_number to true;<br>
	<tab3>If i is divisible by 3 then<br>
	<tab4>print "Fizz";<br>
	<tab4>set print_number to false;<br>
	<tab3>If i is divisible by 5 then<br>
	<tab4>print "Buzz";<br>
	<tab4>set print_number to false;<br>
	<tab3>If print_number, print i;<br>
	<tab3>print a newline;<br>
	<tab2>end<br>
	</p>
	
	<h3>C style pseudocode</h3>
	
	<p><tab1>void function fizzbuzz {<br>
	<tab2>for (i = 1; i <= 100; i++) {<br>
	<tab3>set print_number to true;<br>
	<tab3>If i is divisible by 3<br>
	<tab4>print "Fizz";<br>
	<tab4>set print_number to false;<br>
	<tab3>If i is divisible by 5<br>
	<tab4>print "Buzz";<br>
	<tab4>set print_number to false;<br>
	<tab3>If print_number, print i;<br>
	<tab3>print a newline;<br>
	<tab2>}<br>
	<tab1>}<br>
	</p>
	
	<h3>Basic style pseudocode</h3>
	
	<p><tab1>Sub fizzbuzz()<br>
	<tab2>For i = 1 to 100<br>
	<tab3>print_number = True<br>
	<tab3>If i is divisible by 3 Then<br>
	<tab4>Print "Fizz"<br>
	<tab4>print_number = False<br>
	<tab3>End If<br>
	<tab3>If i is divisible by 5 Then<br>
	<tab4>Print "Buzz"<br>
	<tab4>print_number = False<br>
	<tab3>End If<br>
	<tab3>If print_number = True, Then print i<br>
	<tab3>Print a newline<br>
	<tab2>Next i<br>
	<tab1>End Sub<br>
	</p>
 
	<h3>Plain English pseudocode</h3>
	
	<p><tab1>Program<br>
	<tab2>Loop from 1 to 100<br>
	<tab3>set print_number = True<br>
	<tab3>If i is divisible by 3 then<br>
	<tab4>Print "Fizz"<br>
	<tab4>set print_number = False<br>
	<tab3>End If<br>
	<tab3>If i is divisible by 5 then<br>
	<tab4>Print "Buzz"<br>
	<tab4>set print_number = False<br>
	<tab3>End If<br>
	<tab3>If print_number = True then<br>
	<tab4>Print i<br>
	<tab3>End If<br>
	<tab3>Print a newline<br>
	<tab2>Next value in Loop<br>
	<tab1>End Program<br>
	</p>
	
	<!--
	<tab1>If students grade is greater than or equal to 60 <br>
	<tab2>Print "Passed" <br>
	<tab1>Else <br>
	<tab2>Print "Failed" <br>
	</p>-->
	
</body>
</html>